# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '28635a2a-8fd9-4b26-bc88-751e4defe742'
  imageRepository: 'dotnetdocker'
  containerRegistry: 'acrsurapureddyswetha.azurecr.io'
  dockerfilePath: './samples/aspnetapp/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrsurapureddyswetha68436326-auth'

stages:
- stage: PreDeploymentValidation
  displayName: Pre-Deployment Validation
  jobs:
  - job: PreValidation
    displayName: Pre-Deployment Validation
    pool: Default
    steps:
    - script: |
        chmod +x ./pre-deploy-validation.sh
        ./pre-deploy-validation.sh
      displayName: 'Run Pre-Deployment Validation'

- stage: Build
  displayName: Build stage
  dependsOn: PreDeploymentValidation
  jobs:
  - job: Build
    displayName: Build
    pool: Default
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: DeployTest
  displayName: Deploy to Test Namespace
  dependsOn: Build
  jobs:
  - deployment: DeployTest
    displayName: Deploy to Test
    pool: Default
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              kubectl create namespace test || true
              kubectl apply -f $(Pipeline.Workspace)/manifests/deployment.yml -n test
              kubectl apply -f $(Pipeline.Workspace)/manifests/service.yml -n test || true
              kubectl expose deployment dotnetdocker --type=LoadBalancer --name=app-service --port=8080 --target-port=8080 -n test || true
            displayName: 'Deploy to Test Namespace'
  
- stage: DeployProduction
  displayName: Deploy to Production Namespace
  dependsOn: DeployTest
  condition: succeeded() 
  jobs:
  - deployment: DeployProduction
    displayName: Deploy to Production
    pool: Default
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              kubectl create namespace production || true
              kubectl apply -f $(Pipeline.Workspace)/manifests/deployment.yml -n production
              kubectl expose deployment dotnetdocker --type=LoadBalancer --name=app-service --port=8080 --target-port=8080 -n production || true
            displayName: 'Deploy to Production Namespace'

- stage: PostDeploymentValidation
  displayName: Post-Deployment Validation
  dependsOn: DeployProduction
  jobs:
  - job: PostValidation
    displayName: Post-Deployment Validation
    pool: Default
    steps:
    - script: |
        chmod +x ./post-deploy-validation.sh
        ./post-deploy-validation.sh
      displayName: 'Run Post-Deployment Validation'