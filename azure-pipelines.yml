trigger:
- main

resources:
- repo: self

variables:

  dockerRegistryServiceConnection: 'f19d5afa-d1b1-4108-963d-651b0259774c'
  imageRepository: 'newimage'
  containerRegistry: 'acrsurapureddyswetha.azurecr.io'
  dockerfilePath: './samples/aspnetapp/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrsurapureddyswethab302-auth'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool: newpool
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: DeployTest
  displayName: Deploy to Test Stage
  dependsOn: Build
  jobs:
  - deployment: DeployTest
    displayName: Deploy to Test
    pool: newpool
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret for Test Namespace
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-test'
              namespace: 'test'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster in Test
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-test'
              namespace: 'test'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'

- stage: DeployProd
  displayName: Deploy to Production Stage
  dependsOn: DeployTest
  condition: succeeded()  # Only run if the test deployment succeeds
  jobs:
  - deployment: DeployProd
    displayName: Deploy to Production
    pool: newpool
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret for Prod Namespace
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-prod'
              namespace: 'prod'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster in Production
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-prod'
              namespace: 'prod'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'
